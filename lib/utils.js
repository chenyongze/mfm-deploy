// Generated by ToffeeScript 1.6.3-2
(function() {
  var IS_WIN, assert, exec, ok, path, readline, _;

  readline = require('readline');

  exec = require('child_process').exec;

  assert = require('assert-plus');

  ok = require('okay');

  path = require('path');

  _ = {};

  _.ask_if = function(msg, cb) {
    var rl;
    assert.func(cb);
    rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    return rl.question(msg + "(Y/N)? \n", function(answer) {
      if (answer.toLowerCase() === "y") {
        rl.close();
        cb(null, true);
        return;
      } else if (answer.toLowerCase() === "n") {
        rl.close();
        cb(null, false);
        return;
      }
      rl.close();
      return _.ask_if(msg, function(err, a) {
        return cb(null, a);
      });
    });
  };

  _.ask_if_v = function(msg, cb) {
    var rl;
    assert.func(cb);
    rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    return rl.question(msg + "(yes/no)? \n", function(answer) {
      if (answer.toLowerCase() === "yes") {
        rl.close();
        cb(null, true);
        return;
      } else if (answer.toLowerCase() === "no") {
        rl.close();
        cb(null, false);
        return;
      }
      rl.close();
      return _.ask_if_v(msg, function(err, a) {
        return cb(null, a);
      });
    });
  };

  _.ask_for_input = function(msg, check, cb) {
    var rl;
    assert.func(cb);
    rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    return rl.question("" + msg + "\n", function(answer) {
      if (!check || check && check(answer)) {
        rl.close();
        return cb(null, answer);
      } else {
        rl.close();
        return ask_for_input(msg, check, cb);
      }
    });
  };

  function cmd_path(s) {
    s = JSON.stringify(path.normalize(s));
    s.replace('"', '');
    return s;
  };

  _.work_dir_shell = function(arr, cb) {
    var child, cmd, v, _i, _len;
    assert.func(cb);
    cmd = "sh -c cd " + cmd_path(mfe.path.work_dir);
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      v = arr[_i];
      cmd += " && " + v;
    }
    cmd += "";
    return child = exec(cmd, function(err, stdout, stderr) {
      if (err) {
        return cb(err);
      } else {
        return cb(null);
      }
    });
  };

  _.work_dir_shell2 = function(arr, cb) {
    var child, cmd, v, _i, _len;
    assert.func(cb);
    cmd = "cd " + mfe.path.work_dir;
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      v = arr[_i];
      cmd += " && " + v;
    }
    return child = exec(cmd, function(err, stdout, stderr) {
      if (err) {
        return cb(err, stdout, stderr);
      } else {
        return cb(null, stdout, stderr);
      }
    });
  };

  IS_WIN = process.platform.indexOf('win') === 0;

  _.escapeReg = function(str) {
    return str.replace(/[\.\\\+\*\?\[\^\]\$\(\){}=!<>\|:\/]/g, '\\$&');
  };

  _.escapeShellCmd = function(str) {
    return str.replace(/\s/g, '"$&"');
  };

  _.escapeShellArg = function(cmd) {
    return '"' + cmd + '"';
  };

  _.isWin = function() {
    return IS_WIN;
  };

  _.open = function(path, callback) {
    var child_process, cmd;
    child_process = require('child_process');
    cmd = _.escapeShellArg(path);
    if (_.isWin()) {
      cmd = 'start "" ' + cmd;
    } else {
      if (process.env['XDG_SESSION_COOKIE']) {
        cmd = 'xdg-open ' + cmd;
      } else if (process.env['GNOME_DESKTOP_SESSION_ID']) {
        cmd = 'gnome-open ' + cmd;
      } else {
        cmd = 'open ' + cmd;
      }
    }
    return child_process.exec(cmd, callback);
  };

  module.exports = _;

  if (require.main === module) {
    _.ask_if("abc", function(err, answer) {
      return console.log(answer);
    });
  }

}).call(this);
