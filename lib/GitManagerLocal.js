// Generated by ToffeeScript 1.6.3-2
(function() {
  var GitManager, assert, fs, utils;

  fs = require("fs");

  assert = require('assert-plus');

  utils = require('./utils');

  GitManager = (function() {
    function GitManager(args) {
      instance;
      var instance;
      GitManager = function() {
        return instance;
      };
      GitManager.prototype = this;
      instance = new GitManager();
      instance.constructor = GitManager;
      return instance;
    }

    GitManager.prototype.getUrlByName_ = function(module) {
      return "/Users/lynn/server/" + module + ".git";
    };

    GitManager.prototype.hasRepos = function(module, cb) {
      var has, url;
      assert.func(cb);
      url = this.getUrlByName_(module);
      has = false;
      if (fs.existsSync(url)) {
        has = true;
      }
      return cb(null, has);
    };

    GitManager.prototype.initRepos = function(module, cb) {
      var url;
      assert.func(cb);
      url = this.getUrlByName_(module);
      if (fs.existsSync(url)) {
        cb(null, url);
        return;
      } else {
        return utils.work_dir_shell(["mkdir -p " + url, "cd " + url, "git init --bare"], function(err) {
          return cb(err, url);
        });
      }
    };

    GitManager.prototype.removeRepos = function(module, cb) {
      var url;
      assert.func(cb);
      url = this.getUrlByName_(module);
      if (fs.existsSync(url)) {
        utils.work_dir_shell(["rm -rf " + url], cb);
        return;
      } else {
        return cb(null);
      }
    };

    GitManager.prototype.getModuleNames = function(cb) {
      return utils.work_dir_shell2(["cd /Users/lynn/server", "ls -all"], function(err, out) {
        var list, name, names, _i, _len;
        names = out.match(/\s(\w+)\.git/g);
        list = [];
        for (_i = 0, _len = names.length; _i < _len; _i++) {
          name = names[_i];
          list.push(name.replace(/\.git/, "").replace(/(^\s+)|(\s+$)/g, ""));
        }
        return cb(null, list);
      });
    };

    GitManager.prototype.getList = function(user, gitName, cb) {
      assert.func(cb);
      return cb(null);
    };

    GitManager.prototype.getUrlByModuleName = function(module, cb) {
      var url;
      assert.func(cb);
      url = this.getUrlByName_(module);
      return cb(null, url);
    };

    GitManager.prototype.getUrlsByModuleNames = function(modules, cb) {
      var list, module, url, _i, _len;
      assert.func(cb);
      list = [];
      for (_i = 0, _len = modules.length; _i < _len; _i++) {
        module = modules[_i];
        url = "/Users/lynn/server/" + module + ".git";
        if (!fs.existsSync(url)) {
          cb("附加模块 [" + module + "] 不存在");
          return false;
        }
        list.push({
          module: module,
          url: url
        });
      }
      cb(null, list);
      return true;
    };

    return GitManager;

  })();

  module.exports = GitManager;

}).call(this);
