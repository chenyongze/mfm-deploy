// Generated by ToffeeScript 1.6.3-2
var AskQuestion, DeployAdd, JsonStore, NameBaseDeploy, assert, fs, inquirer, util,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fs = require('fs');

util = require('util');

NameBaseDeploy = require('./DeployBase').NameBaseDeploy;

inquirer = require("inquirer");

assert = require("assert-plus");

JsonStore = require("../JsonStore");

AskQuestion = (function() {
  function AskQuestion(edit, store, cb) {
    var o, q, q1, q11, q2, q21;
    assert.func(cb);
    o = store.json;
    q = {
      name: "domain",
      message: "设置域名"
    };
    if (edit) {
      q.message += ":[" + o.domain + "]";
    }
    q.validate = function(domain) {
      domain = domain || o.domain;
      if (!domain || !domain.length) {
        return true;
      } else {
        if (domain === "null") {
          return true;
        }
        if (!/^http\:\/\//.test(domain)) {
          return "域名url不合法";
        }
        return true;
      }
      return true;
    };
    q1 = {
      name: "receiver_statics",
      message: "静态文件接收网址"
    };
    if (edit) {
      q1.message += ":[" + o.receiver_statics + "]";
    }
    q1.validate = function(receiver) {
      receiver = receiver || o.receiver_statics;
      if (!receiver || !receiver.length) {
        return true;
      } else {
        if (receiver === "null") {
          return true;
        }
        if (!/^http\:\/\//.test(receiver)) {
          return "您输入的url不合法";
        }
        return true;
      }
      return true;
    };
    q11 = {
      name: "output_statics",
      message: "静态文件保存路径"
    };
    if (edit) {
      q11.message += ":[" + o.output_statics + "]";
    }
    q11.validate = function(output) {
      output = output || o.output_statics;
      if (!output || !output.length) {
        return false;
      }
      return true;
    };
    q2 = {
      name: "receiver_templates",
      message: "模板文件接收网址"
    };
    if (edit) {
      q2.message += ":[" + o.receiver_templates + "]";
    }
    q2.validate = function(receiver) {
      receiver = receiver || o.receiver_templates;
      if (!receiver || !receiver.length) {
        return true;
      } else {
        if (receiver === "null") {
          return true;
        }
        if (!/^http\:\/\//.test(receiver)) {
          return "您输入的url不合法";
        }
        return true;
      }
      return true;
    };
    q21 = {
      name: "output_templates",
      message: "模板保存路径"
    };
    if (edit) {
      q21.message += ":[" + o.output_templates + "]";
    }
    q21.validate = function(output) {
      output = output || o.output_templates;
      if (!output || !output.length) {
        return false;
      }
      return true;
    };
    inquirer.prompt([q, q1, q11, q2, q21], function(answers) {
      if (o.domain && !answers.domain) {
        answers.domain = o.domain;
      }
      if (o.receiver_statics && !answers.receiver_statics) {
        answers.receiver_statics = o.receiver_statics;
      }
      if (o.output_statics && !answers.output_statics) {
        answers.output_statics = o.output_statics;
      }
      if (o.receiver_templates && !answers.receiver_templates) {
        answers.receiver_templates = o.receiver_templates;
      }
      if (o.output_templates && !answers.output_templates) {
        answers.output_templates = o.output_templates;
      }
      if (answers.receiver_statics === 'null') {
        answers.receiver_statics = null;
      }
      if (answers.receiver_templates === 'null') {
        answers.receiver_templates = null;
      }
      if (answers.domain === 'null') {
        answers.domain = null;
      }
      store.json.domain = answers.domain;
      store.json.receiver_statics = answers.receiver_statics;
      store.json.output_statics = answers.output_statics;
      store.json.receiver_templates = answers.receiver_templates;
      store.json.output_templates = answers.output_templates;
      return cb(null, answers);
    });
  }

  return AskQuestion;

})();

DeployAdd = (function(_super) {
  __extends(DeployAdd, _super);

  function DeployAdd(name, cmd, next) {
    DeployAdd.__super__.constructor.call(this, name, cmd, next);
  }

  DeployAdd.prototype.onFileExists_ = function() {
    return this.next("部署标识[" + this.name + "]已经存在");
  };

  DeployAdd.prototype.onFileNotExists_ = function() {
    var store,
      _this = this;
    store = new JsonStore(this.filename);
    return new AskQuestion(false, store, function(err, answers) {
      store.json.name = _this.name;
      store.save();
      return _this.commitChanges_("add deploy [" + _this.name + "]", _this.next);
    });
  };

  return DeployAdd;

})(NameBaseDeploy);

module.exports = {};

module.exports.DeployAdd = DeployAdd;

module.exports.AskQuestion = AskQuestion;
