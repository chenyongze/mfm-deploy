// Generated by ToffeeScript 1.6.3-2
var GitManager, ModuleRemove, NameModuleBase, assert, async, exec, fs, gitManager, ok, path, util, utils, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

NameModuleBase = require('./ModuleBase').NameModuleBase;

GitManager = require('../GitManager');

gitManager = new GitManager();

ok = require('okay');

async = require('async');

assert = require('assert-plus');

util = require('util');

fs = require('fs');

exec = require('child_process').exec;

path = require('path');

_ = require('underscore');

async = require('async');

utils = require('../utils');

ModuleRemove = (function(_super) {
  __extends(ModuleRemove, _super);

  function ModuleRemove(module, cmd, next) {
    ModuleRemove.__super__.constructor.call(this, module, cmd, next);
  }

  ModuleRemove.prototype.onDirExists_ = function() {
    return this.next("删除模块【" + this.module + "】,请谨慎操作！\n  登陆: http://git.mofang.com\n  账户: mfe");
  };

  ModuleRemove.prototype.checkRepos_ = function(cb) {
    var _this = this;
    assert.func(cb);
    return gitManager.hasRepos(this.module, ok(cb, function(has) {
      _this.hasRepos = has;
      if (has) {
        return cb(null);
      } else {
        return cb("模块[" + _this.module + "]不存在");
      }
    }));
  };

  ModuleRemove.prototype.askToRemove_ = function(cb) {
    var _this = this;
    assert.func(cb);
    return utils.ask_if("确定要删除模块【" + this.module + "】吗? (删除后无法恢复!请谨慎操作!)", function(err, answer) {
      if (answer) {
        return cb(null);
      } else {
        return cb("取消删除模块[" + _this.module + "]");
      }
    });
  };

  ModuleRemove.prototype.removeRepos_ = function(cb) {
    assert.func(cb);
    return gitManager.removeRepos(this.module, cb);
  };

  ModuleRemove.prototype.clearServer_ = function(cb) {
    assert.func(cb);
    return utils.work_dir_shell(["mfe server clean", "rm -rf watch.sh"], cb);
  };

  ModuleRemove.prototype.removeLocalDir_ = function(cb) {
    assert.func(cb);
    return utils.work_dir_shell(["rm -rf " + this.module], cb);
  };

  return ModuleRemove;

})(NameModuleBase);

module.exports = {};

module.exports.ModuleRemove = ModuleRemove;
