// Generated by ToffeeScript 1.6.3-4
(function() {
  var GitManager, ModuleBase, ModulePrepareDirectory, assert, async, colors, exec, fs, gitManager, ok, path, shell, util, utils, work_dir_shell, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ModuleBase = require('./ModuleBase').ModuleBase;

  colors = require('colors');

  util = require('util');

  assert = require('assert-plus');

  _ = require("underscore");

  ok = require('okay');

  async = require('async');

  shell = require('shelljs');

  fs = require('fs');

  exec = require('child_process').exec;

  utils = require('../utils');

  GitManager = require('../GitManager');

  gitManager = new GitManager();

  path = require('path');

  work_dir_shell = utils.work_dir_shell;

  function sleep(time, fn) {
    return setTimeout(fn, time);
  };

  function ask_create(module, cb) {
    return utils.ask_if("是否创建[" + module + "]业务模块", function(err, answer) {
      return cb(err, answer);
    });
  };

  function release_defaults(cb) {
    return work_dir_shell(["mfe server clean"], cb);
  };

  function checkoutRepos(module, url, cb) {
    var cmds;
    assert.func(cb);
    cmds = ["rm -rf " + module, "git clone " + url + " " + module];
    return work_dir_shell(cmds, cb);
  };

  ModulePrepareDirectory = (function(_super) {
    __extends(ModulePrepareDirectory, _super);

    ModulePrepareDirectory.prototype.addUser = function(gitname, cb) {
      var err, projectName, success, _i, _len, _ref,
        _this = this;
      _ref = this.user.addedRepos;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        projectName = _ref[_i];
        if (projectName === gitname) {
          cb();
          return;
        }
      }
      gitManager.addUserToRepos(this.user.username, gitname, function() {
        err = arguments[0], success = arguments[1];
        if (success) {
          _this.user.addedRepos.push(gitname);
          _this.user_conf.save();
        }
        return cb(err, success);
      });
    };

    function ModulePrepareDirectory(module, cmd, next) {
      var answer, err, exists, existsGit, out,
        _this = this;
      ModulePrepareDirectory.__super__.constructor.call(this, module, cmd, next);
      exec("sh -c pwd", function() {
        err = arguments[0], out = arguments[1];
        if (err) {
          next(err);
          return false;
        }
        if (out && out.length) {
          out = out.replace(/\s+/, "");
        }
        exists = fs.existsSync("" + out + "/deploy");
        existsGit = fs.existsSync("" + out + "/deploy/.git");
        if (!exists && !existsGit) {
          utils.ask_if_v(("警告:将清除目录【" + out + "】下所有文件,要继续吗").red, function() {
            err = arguments[0], answer = arguments[1];
            if (err) {
              next(err);
              return false;
            }
            if (!answer) {
              next("请更换目录");
              return false;
            }
            _$$_0();
          });
        } else {
          _$$_0();
        }
        function _$$_0() {
          assert.func(next);
          _this.defaultModules = mfe.defaultModules;
          _this.user.addedRepos = [];
          return async.waterfall([_this.clearDir_.bind(_this), _this.checkoutDeploy_.bind(_this), _this.templatesServerConfig_.bind(_this), _this.checkoutDefaultModules_.bind(_this), _this.checkoutAddModules_.bind(_this), _this.initMainModule_.bind(_this), _this.initDeploys_.bind(_this), _this.prepareComplete.bind(_this)], next);
        };
      });
    }

    ModulePrepareDirectory.prototype.createModule_ = function(module, cb) {
      var _this = this;
      assert.func(cb);
      return gitManager.initRepos(module, ok(cb, function(url) {
        var cmds;
        sleep(!1000);
        _this.addUser(module, function() {
          shell.rm('-rf', "" + mfe.path.work_dir + "/" + module);
          shell.cp('-rf', "" + mfe.path.templates + "/module", mfe.path.work_dir);
          cmds = ["mv module " + module, "cd " + module, "git init && git add -A ", "git commit -m \"first commit\"", "git remote add origin " + url, "git push -u origin master"];
          return work_dir_shell(cmds, cb);
        });
      }));
    };

    ModulePrepareDirectory.prototype.startModule_ = function(module, cb) {
      var _this = this;
      assert.func(cb);
      return gitManager.getUrlByModuleName(module, ok(cb, function(url) {
        _this.addUser(module, function() {
          shell.rm('-rf', "" + mfe.path.work_dir + "/" + module);
          return work_dir_shell(["git clone " + url + " " + module], cb);
        });
      }));
    };

    ModulePrepareDirectory.prototype.clearDir_ = function(cb) {
      return work_dir_shell(["rm -rf *", "rm -rf *.*"], cb);
    };

    ModulePrepareDirectory.prototype.checkoutDeploy_ = function(cb) {
      var _this = this;
      return gitManager.getUrlByModuleName("deploy", ok(cb, function(url) {
        _this.addUser('deploy', function() {
          return checkoutRepos("deploy", url, cb);
        });
      }));
    };

    ModulePrepareDirectory.prototype.templatesServerConfig_ = function(cb) {
      return cb();
    };

    ModulePrepareDirectory.prototype.checkoutDefaultModules_ = function(cb) {
      var _this = this;
      assert.func(cb);
      return async.each(mfe.defaultModules, function(module, cb) {
        return gitManager.hasRepos(module, ok(cb, function(has) {
          if (!has) {
            return gitManager.initRepos(module, ok(cb, function(url) {
              var cmds;
              _this.addUser(!module);
              cmds = ["mkdir " + module, "cd " + module, "touch README.md", "git init", "git add -A ", "git commit -m \"first commit\"", "git remote add origin " + url, "git push -u origin master "];
              return work_dir_shell(cmds, cb);
            }));
          } else {
            return gitManager.getUrlByModuleName(module, ok(cb, function(url) {
              _this.addUser(module, function() {
                return checkoutRepos(module, url, cb);
              });
            }));
          }
        }));
      }, cb);
    };

    ModulePrepareDirectory.prototype.checkoutAddModules_ = function(cb) {
      var m, modules, _i, _len, _ref,
        _this = this;
      assert.func(cb);
      modules = this.cmd.add;
      _ref = this.defaultModules;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        m = _ref[_i];
        if (_.contains(modules, m)) {
          cb("模块[" + m + "]是默认模块,不用额外指定!");
          return;
        }
      }
      if (modules && modules.length) {
        return gitManager.getUrlsByModuleNames(modules, ok(cb, function(list) {
          var cmds, o;
          _this.addUser(modules, function() {
            var _j, _len1;
            cmds = [];
            for (_j = 0, _len1 = list.length; _j < _len1; _j++) {
              o = list[_j];
              cmds.push("git clone " + o.url + " " + o.module);
            }
            return work_dir_shell(cmds, cb);
          });
        }));
      } else {
        return cb();
      }
    };

    ModulePrepareDirectory.prototype.createDefaultFiles_ = function(module, cb) {
      var cmds;
      assert.func(cb);
      cmds = ["touch README.md", "git add -A", "git commit -m \"auto init add readme file\"", "git push -u origin master"];
      return work_dir_shell(cmds, cb);
    };

    ModulePrepareDirectory.prototype.initMainModule_ = function(cb) {
      var _this = this;
      assert.func(cb);
      return gitManager.hasRepos(this.module, ok(cb, function(has) {
        if (!has) {
          return ask_create(_this.module, ok(cb, function(create) {
            if (create) {
              return _this.createModule_(_this.module, cb);
            } else {
              return cb("业务模块不存在");
            }
          }));
        } else {
          return _this.startModule_(_this.module, cb);
        }
      }));
    };

    ModulePrepareDirectory.prototype.initDeploys_ = function(cb) {
      var content, deployName, filename, module, modules, template, template2, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
      assert.func(cb);
      if (!this.cmd.deploy || this.cmd.deploy === "local") {
        deployName = '""';
      } else {
        if (this.cmd.deploy.indexOf("/" === -1)) {
          this.username = this.user.username;
        } else {
          this.username = this.cmd.deploy.split("/")[0];
          this.cmd.deploy = this.cmd.deploy.split("/")[1];
        }
        deployName = JSON.stringify(path.normalize("" + mfe.path.work_dir + "/deploy/" + this.username + "/" + this.cmd.deploy + ".json"));
      }
      template = "/* fis-conf.js 由mfm工具自动生成,请勿手动修改 */\nvar fs = require('fs')\nconf.init(__dirname);\nif( fs.existsSync( __dirname + \"/pack.js\")){\n    require( __dirname + \"/pack.js\");\n}";
      template2 = "conf.parseDeploy({filename:**deploy**});\n//new conf.ModuleConfig();\nnew conf.**config**();";
      modules = [];
      _ref = mfe.defaultModules;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        module = _ref[_i];
        modules.push(module);
      }
      if (this.cmd.add) {
        _ref1 = this.cmd.add;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          module = _ref1[_j];
          modules.push(module);
        }
      }
      modules.push(this.module);
      function writeFile(filename, name, conf) {
        var content;
        content = template + template2.replace("**deploy**", name).replace("**config**", conf);
        return fs.writeFileSync(filename, content);
      };
      for (_k = 0, _len2 = modules.length; _k < _len2; _k++) {
        module = modules[_k];
        filename = "" + mfe.path.work_dir + "/" + module + "/fis-conf.js";
        if (module === "common") {
          writeFile(filename, deployName, "ModuleConfig");
        } else if (module === "modules") {
          writeFile(filename, deployName, "ModuleConfig");
        } else if (module === "mfe") {
          content = "/* fis-conf.js 由mfm工具自动生成,请勿手动修改 */";
          fs.writeFileSync(filename, content);
        } else {
          writeFile(filename, deployName, "ModuleConfig");
        }
      }
      return cb(null);
    };

    ModulePrepareDirectory.prototype.prepareComplete = function(cb) {
      throw new Error("abstract method!");
    };

    return ModulePrepareDirectory;

  })(ModuleBase);

  module.exports = {};

  module.exports.ModulePrepareDirectory = ModulePrepareDirectory;

}).call(this);
