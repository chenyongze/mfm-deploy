// Generated by ToffeeScript 1.6.3-2
var CmdBase, DeployBase, NameBaseDeploy, assert, fs, util, utils,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fs = require('fs');

util = require('util');

CmdBase = require('./CmdBase').CmdBase;

assert = require('assert-plus');

utils = require('../utils');

DeployBase = (function(_super) {
  __extends(DeployBase, _super);

  function DeployBase(name, cmd, next) {
    var _this = this;
    DeployBase.__super__.constructor.call(this, name, cmd, next);
    if (cmd.user) {
      this.username = cmd.user;
    } else {
      this.username = this.user.username;
    }
    this.userDir = "" + this.deployDir + "/" + this.username;
    fs.exists(this.deployDir, function(exists) {
      if (!exists) {
        return next("非工作目录，请先初始化工作目录 mfm sm <module>");
      } else {
        return _this.updateGit_();
      }
    });
  }

  DeployBase.prototype.updateGit_ = function(cb) {
    if (!fs.existsSync(this.userDir)) {
      fs.mkdirSync(this.userDir);
    }
    return this.onDirExists_();
  };

  DeployBase.prototype.onDirExists_ = function() {};

  DeployBase.prototype.commitChanges_ = function(msg, cb) {
    var _this = this;
    assert.func(cb);
    return utils.work_dir_shell2(["cd deploy", "git add -A", "git commit -m \"" + msg + "\"", "git pull --rebase", "git push"], function(err, out) {
      if (err && out.match(/nothing\sto\scommit/gi)) {
        return cb("部署[" + _this.name + "]无任何修改");
      } else {
        return cb(err);
      }
    });
  };

  return DeployBase;

})(CmdBase);

NameBaseDeploy = (function(_super) {
  __extends(NameBaseDeploy, _super);

  function NameBaseDeploy(name, cmd, next) {
    NameBaseDeploy.__super__.constructor.call(this, name, cmd, next);
    this.name = name;
    if (this.name.indexOf("/") !== -1) {
      this.username = this.name.split("/")[0];
      this.userDir = "" + this.deployDir + "/" + this.username;
      if (!fs.existsSync(this.userDir)) {
        fs.mkdirSync(this.userDir);
      }
    }
    this.filename = "" + this.deployDir + "/" + this.username + "/" + this.name + ".json";
  }

  NameBaseDeploy.prototype.onDirExists_ = function() {
    var _this = this;
    NameBaseDeploy.__super__.onDirExists_.apply(this, arguments);
    return fs.exists(this.filename, function(exists) {
      if (!exists) {
        return _this.onFileNotExists_();
      } else {
        return _this.onFileExists_();
      }
    });
  };

  NameBaseDeploy.prototype.onFileNotExists_ = function() {
    return this.next("部署标识[" + this.name + "]不存在");
  };

  NameBaseDeploy.prototype.onFileExists_ = function() {};

  return NameBaseDeploy;

})(DeployBase);

module.exports = {};

module.exports.CmdBase = CmdBase;

module.exports.DeployBase = DeployBase;

module.exports.NameBaseDeploy = NameBaseDeploy;
