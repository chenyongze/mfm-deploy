// Generated by ToffeeScript 1.6.3-1
(function() {
  var GitManager, assert, exec, fs, gitHand, gitInfo;

  exec = require('child_process').exec;

  gitHand = require("../test");

  assert = require('assert-plus');

  fs = require("fs");

  GitManager = (function() {
    function GitManager() {}

    function getUrlByName_(module, fun) {
      assert.func(fun);
      return gitHand.createRepos(module, function(projects) {
        fun(projects);
        return console.log(projects.web_url);
      });
    };

    GitManager.prototype.hasRepos = function(module, cb) {
      assert.func(cb);
      return this.getModuleNames(function(projects) {
        var flag, project, _i, _len;
        flag = false;
        for (_i = 0, _len = projects.length; _i < _len; _i++) {
          project = projects[_i];
          if (project.name === module) {
            flag = true;
            break;
          }
        }
        return flag && console.log("仓库存在") || console.log("仓库不存在");
      });
    };

    GitManager.prototype.initRepos = function(module, cb) {};

    GitManager.prototype.getModuleNames = function(fun) {
      assert.func(fun);
      return gitHand.showProject(null, function(projects) {
        return fun(projects);
      });
    };

    function getList(pro, user, gitName, cb) {
      var createUser, projectId;
      createUser = user;
      projectId = pro;
      this.getModuleNames(function(projects) {
        var project, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = projects.length; _i < _len; _i++) {
          project = projects[_i];
          if (project.name === pro) {
            _results.push(console.log(project.id));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      return gitHand.showUsers(null, function(user) {
        if (user.name === createUser) {
          console.log(user.id);
          return;
        }
      });
    };

    GitManager.prototype.getUrlByModuleName = function(module, cb) {
      var url;
      assert.func(cb);
      url = this.getUrlByName_(module);
      return cb(null, url);
    };

    GitManager.prototype.getUrlsByModuleNames = function(modules, cb) {
      var list, module, url, _i, _len;
      assert.func(cb);
      list = [];
      for (_i = 0, _len = modules.length; _i < _len; _i++) {
        module = modules[_i];
        url = "/Users/lynn/server/" + module + ".git";
        if (!fs.existsSync(url)) {
          cb("附加模块 [" + module + "] 不存在");
          return false;
        }
        list.push({
          module: module,
          url: url
        });
      }
      return cb(null, list);
    };

    return GitManager;

  })();

  if (require.main === module) {
    gitInfo = new GitManager();
    gitInfo.getList("baozi", "zhaoshuai");
  }

}).call(this);
