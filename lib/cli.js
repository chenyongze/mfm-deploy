// Generated by CoffeeScript 1.8.0
(function() {
  var DeployAdd, DeployEdit, DeployList, DeployRemove, ModuleComplete, ModuleDeploy, ModuleList, ModuleRemove, ModuleStart, Project, Upgrade, fs, init_user, list, program, range;

  fs = require('fs');

  program = require('commander');

  DeployAdd = require('./cmd/DeployAdd').DeployAdd;

  DeployList = require('./cmd/DeployList').DeployList;

  DeployRemove = require('./cmd/DeployRemove').DeployRemove;

  DeployEdit = require('./cmd/DeployEdit').DeployEdit;

  ModuleStart = require('./cmd/ModuleStart').ModuleStart;

  ModuleComplete = require('./cmd/ModuleComplete').ModuleComplete;

  ModuleRemove = require('./cmd/ModuleRemove').ModuleRemove;

  ModuleList = require('./cmd/ModuleList').ModuleList;

  ModuleDeploy = require('./cmd/ModuleDeploy').ModuleDeploy;

  Project = require('./cmd/Project').Project;

  Upgrade = require('./cmd/Upgrade').Upgrade;

  init_user = require('./init_user');

  range = function(val) {
    return val.split('..').map(Number);
  };

  list = function(val) {
    return val.split(',');
  };

  mfe.cli = {};

  mfe.cli.run = function(argv) {
    var help;
    if (!fs.existsSync(mfe.path.data)) {
      fs.mkdirSync(mfe.path.data);
    }
    if (!mfe.user_conf.json.init) {
      init_user();
      return false;
    }
    program.version('0.0.1');
    program.command('sm <module>').description('[start module] 创建/切换到业务模块module').option('-a, --add <name>[,<name2>,[...]]', '追加的模块', list).option('-d, --deploy <name>', '按照name标识部署').option('-o, --optimize <short>', 'fis优化参数mopDu').option('-c, --channel [number]', '模板服务器频道号').option('-M, --mfe', '强制推送mfe的php支撑文件').action(function(module, cmd) {
      var msg, msg_end;
      msg = "准备切换到业务模块[" + module + "]";
      msg_end = "已切换到业务模块[" + module + "]";
      if (cmd.deploy) {
        msg += ",使用[" + cmd.deploy + "]标识部署产出文件";
        msg_end += ",部署标识[" + cmd.deploy + "]产出文件成功!";
      }
      console.log(msg);
      return new ModuleStart(module, cmd, function(err) {
        if (err) {
          console.log(err);
        } else {
          console.log(msg_end);
        }
        return process.exit();
      });
    });
    program.command('cm <module>').description('[complete module] 完成业务模块module的开发').action(function(module, cmd) {
      return new ModuleComplete(module, cmd, function(err) {
        if (err) {
          console.log(err);
        } else {
          console.log("完成业务模块", module, "的开发修改已提交");
        }
        return process.exit();
      });
    });
    program.command('rm <module>').description('[remove module] 删除业务模块').action(function(module, cmd) {
      return new ModuleRemove(module, cmd, function(err) {
        if (err) {
          console.log(err);
        } else {
          console.log("删除业务模块[" + module + "], 删除所有部署标识上的模块" + module);
        }
        return process.exit();
      });
    });
    program.command('lm').description('[list module] 列出全部业务模块').action(function(module, cmd) {
      return new ModuleList(null, cmd, function(err) {
        if (err) {
          console.log(err);
        }
        return process.exit();
      });
    });
    program.command('dm <module>').description('[deploy module] 部署模块').option('-d --deploy <name>', '部署标识', list).option('-c --channel <channelid>', '通道id', list).option('-f --cleanup', '部署前清空通道', list).option('-p --package', '生成打包id', list).option('-o --online', '部署模板包到线上', list).action(function(name, cmd) {
      return new ModuleDeploy(name, cmd, function(err) {
        if (err) {
          console.log(err);
        } else {
          console.log("部署模块[" + name + "]完成...");
        }
        return process.exit();
      });
    });
    program.command('ad <name>').description('[add deploy] 添加明为name的部署标识').action(function(name, cmd) {
      return new DeployAdd(name, cmd, function(err) {
        if (err) {
          console.log(err);
        } else {
          console.log("创建标识符[" + name + "]成功");
        }
        return process.exit();
      });
    });
    program.command('rd <name>').description('[remove deploy] 删除部署标识').action(function(name, cmd) {
      return new DeployRemove(name, cmd, function(err) {
        if (err) {
          console.log(err);
        }
        return process.exit();
      });
    });
    program.command('ed <name>').description('[edit deploy] 编辑部署标识').action(function(name, cmd) {
      return new DeployEdit(name, cmd, function(err) {
        if (err) {
          console.log(err);
        }
        return process.exit();
      });
    });
    program.command('ld').option('-u, --user <name>', '用户名').description('[list deploy] 列出全部部署标识').action(function(cmd) {
      return new DeployList(cmd, function(err) {
        if (err) {
          console.log(err);
        }
        return process.exit();
      });
    });
    program.command('dp <project>').option('-d, --deploy <name>', '部署标识').description('[deploy project] 部署整个工程').action(function(name, cmd) {
      return new Project(name, cmd, function(err) {
        if (err) {
          console.log(err);
        } else {
          console.log("[" + name + "]发布成功");
        }
        return process.exit();
      });
    });
    program.command('up').description('[upgrade] 更新mfm工具').action(function(name, cmd) {
      console.log("正在升级mfm部署工具...");
      return new Upgrade(name, cmd, function(err, version) {
        if (err) {
          console.log(err);
          console.log("mfm升级失败!");
        } else {
          console.log("mfm升级成功...");
          console.log("当前版本为:" + version);
        }
        return process.exit();
      });
    });
    help = function() {
      return process.stdout.write(program.helpInformation().replace('*', ""));
    };
    program.command('*').action(function(env) {
      console.log("******************************");
      console.log("**** ERROR:" + env + "为无效命令");
      console.log("******************************");
      help();
      return process.exit();
    });
    program.parse(process.argv);
    if (!program.args.length) {
      help();
      return process.exit();
    }
  };

}).call(this);
