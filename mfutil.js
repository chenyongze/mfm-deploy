// Generated by ToffeeScript 1.6.3-2
var dos2unix, fs, fse, mfutil, program;

fs = require('fs');

fse = require('fs-extra');

program = require('commander');

dos2unix = require("./mfutil/dos2unix");

mfutil = {};

function g() {
  var base, i, max, min, step, str;
  base = 24;
  min = 320;
  max = 1600;
  step = 1;
  g = function(w) {
    return base / 640 * w;
  };
  function t(h, f) {
    return "@media only screen\n" + h + " {\n    html{\n        font-size:" + f + "px !important;\n    }\n}\n";
  };
  str = "";
  i = min;
  while (i <= max) {
    str += t("and (width: " + i + "px)", g(i));
    i += step;
  }
  return fs.writeFileSync("statics/css/g.css", str);
};

function generate() {
  var base, i, max, min, step, str;
  base = 24;
  min = 320;
  max = 1080;
  step = 10;
  g = function(w) {
    return base / 640 * w;
  };
  function t(h, f) {
    return "@media only screen\n" + h + " {\n    html{\n        font-size:" + f + "px !important;\n    }\n}\n";
  };
  str = "";
  i = min;
  while (i <= max) {
    if (i === min) {
      str += t("and (max-width: " + i + "px)", g(i));
    }
    str += t("and (min-width: " + i + "px) and (max-width: " + (i + step) + "px)", g(i));
    if (i === max) {
      str += t("and (min-width: " + i + "px)", g(i));
    }
    i += step;
  }
  return fs.writeFileSync("statics/css/g.css", str);
};

function torem(filename) {
  var cnt, remfn;
  cnt = fs.readFileSync(filename, {
    encoding: 'utf-8'
  });
  if (!(/@function\s+mfe\-px2rem/ig.test(cnt))) {
    cnt = cnt.replace(/(-*\d+)\s*px/ig, "mfe-px2rem($1)");
  }
  remfn = "@function mfe-px2rem($px) {\n    @return $px/27 + rem;\n}\n";
  cnt = remfn + cnt;
  return fs.writeFileSync(filename, cnt, {
    encoding: 'utf-8'
  });
};

function generate_config() {
  var cnt;
  cnt = "# Require any additional compass plugins here.\n\n# Set this to the root of your project when deployed:\nhttp_path = \"/\"\ncss_dir = \"statics/css\"\nsass_dir = \"statics/sass\"\nimages_dir = \"statics/img\"\njavascripts_dir = \"statics/js\"\n\n# You can select your preferred output style here (can be overridden via the command line):\n# output_style = :expanded or :nested or :compact or :compressed\n\n# To enable relative paths to assets via compass helper functions. Uncomment:\n# relative_assets = true\n\n# To disable debugging comments that display the original location of your selectors. Uncomment:\n# line_comments = false\n\n\n# If you prefer the indented syntax, you might want to regenerate this\n# project again passing --syntax sass, or you can uncomment this:\n# preferred_syntax = :sass\n# and then run:\n# sass-convert -R --from scss --to sass sass scss && rm -rf sass && mv scss sass\n";
  return fs.writeFileSync("config.rb", cnt, {
    encoding: "utf-8"
  });
};

function compass() {
  fse.mkdirsSync("statics/scss");
  return generate_config();
};

function mobile() {
  compass();
  generate();
  return console.log("【mfutil torem <filename>】 to convert px to rem");
};

function check_dir() {
  return true;
};

function list(val) {
  return val.split(',');
};

mfutil.run = function(argv) {
  if (!check_dir()) {
    return false;
  }
  program.version('0.0.1');
  program.command('env <name>').description('generate compass/mobile env').action(function(name, cmd) {
    if (name === compass) {
      compass();
    }
    if (name === mobile) {
      mobile();
    }
    return process.exit();
  });
  program.command('g [filename]').description('generate global responsive file').action(function(cmd) {
    g();
    return process.exit();
  });
  program.command('generate [filename]').description('generate global responsive file').action(function(cmd) {
    generate();
    return process.exit();
  });
  program.command('torem <filename>').description('convert px to rem').action(function(filename, cmd) {
    torem(filename);
    return process.exit();
  });
  program.command('dos2unix <directory>').option('-e, --ext <ext1>[,ext2>,[...]]', '追加的模块', list).description('convert files from dos to unix line endings').action(function(directory, cmd) {
    var err,
      _this = this;
    dos2unix(directory, {
      filter: cmd.ext
    }, function() {
      err = arguments[0];
      if (err) {
        return console.log(err);
      } else {
        return process.exit();
      }
    });
  });
  function help() {
    return process.stdout.write(program.helpInformation().replace('*', ""));
  };
  program.command('*').action(function(env) {
    console.log("******************************");
    console.log("**** ERROR:" + env + "为无效命令");
    console.log("******************************");
    help();
    return process.exit();
  });
  program.parse(process.argv);
  if (!program.args.length) {
    help();
    return process.exit();
  }
};

function main(argv) {
  return mfutil.run(argv);
};

module.exports.run = main;
