// Generated by CoffeeScript 1.6.3
(function() {
  var ApiBase, debug, querystring, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  debug = require('debug')('gitlab:ApiBaseHTTP');

  ApiBase = require('./ApiBase').ApiBase;

  querystring = require('querystring');

  module.exports.ApiBaseHTTP = (function(_super) {
    __extends(ApiBaseHTTP, _super);

    function ApiBaseHTTP() {
      this._request = __bind(this._request, this);
      this._parseResponse = __bind(this._parseResponse, this);
      this._request_options = __bind(this._request_options, this);
      this.put = __bind(this.put, this);
      this.post = __bind(this.post, this);
      this["delete"] = __bind(this["delete"], this);
      this.get = __bind(this.get, this);
      this._translateUrl = __bind(this._translateUrl, this);
      this.handleOptions = __bind(this.handleOptions, this);
      _ref = ApiBaseHTTP.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ApiBaseHTTP.prototype.handleOptions = function() {
      var host, key, value, _base, _base1, _base2, _base3, _base4, _base5, _base6, _base7, _base8, _base9, _ref1;
      ApiBaseHTTP.__super__.handleOptions.apply(this, arguments);
      if (this.options.url != null) {
        _ref1 = require('url').parse(this.options.url);
        for (key in _ref1) {
          value = _ref1[key];
          if ((_base = this.options)[key] == null) {
            _base[key] = value;
          }
        }
      }
      if ((_base1 = this.options).host == null) {
        _base1.host = this.options.hostname;
      }
      host = this.options.host.split(':');
      if ((_base2 = this.options).hostname == null) {
        _base2.hostname = host[0];
      }
      if ((_base3 = this.options).port == null) {
        _base3.port = host[1];
      }
      if ((_base4 = this.options).username == null) {
        _base4.username = null;
      }
      if ((_base5 = this.options).protocol == null) {
        _base5.protocol = 'http:';
      }
      if ((_base6 = this.options).port == null) {
        _base6.port = this.options.protocol === 'https:' ? 443 : 80;
      }
      this.options.port = parseInt(this.options.port);
      if ((_base7 = this.options).path == null) {
        _base7.path = '/';
      }
      if ((_base8 = this.options).pathname == null) {
        _base8.pathname = this.options.path;
      }
      if ((_base9 = this.options).base_url == null) {
        _base9.base_url = '';
      }
      if ('boolean' !== typeof this.options['strict-ssl']) {
        this.options['strict-ssl'] = true;
      }
      return debug("handleOptions()");
    };

    ApiBaseHTTP.prototype._translateUrl = function(path, params) {
      var url;
      if (params == null) {
        params = {};
      }
      url = ("" + this.options.path + "/" + this.options.base_url + "/" + path + "?private_token=" + this.options.token).replace(/\/\//, '/');
      if (params) {
        url += "&" + (querystring.stringify(params));
      }
      return url;
    };

    ApiBaseHTTP.prototype.get = function(path, params, fn) {
      var options;
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      if ('function' === typeof params) {
        fn = params;
        params = {};
      }
      options = {
        path: this._translateUrl(path, params),
        method: 'GET',
        params: params
      };
      return this._request(options, fn);
    };

    ApiBaseHTTP.prototype["delete"] = function(path, fn) {
      var options;
      if (fn == null) {
        fn = null;
      }
      options = {
        path: this._translateUrl(path),
        method: "DELETE",
        headers: {
          'Content-Length': 0
        }
      };
      return this._request(options, fn);
    };

    ApiBaseHTTP.prototype.post = function(path, data, fn) {
      var options;
      if (data == null) {
        data = {};
      }
      if (fn == null) {
        fn = null;
      }
      options = {
        path: this._translateUrl(path),
        method: 'POST',
        data: data
      };
      return this._request(options, fn);
    };

    ApiBaseHTTP.prototype.put = function(path, data, fn) {
      var options;
      if (data == null) {
        data = {};
      }
      if (fn == null) {
        fn = null;
      }
      options = {
        path: this._translateUrl(path),
        method: 'PUT',
        data: data
      };
      return this._request(options, fn);
    };

    ApiBaseHTTP.prototype._request_options = function(options) {
      var _base, _base1;
      if (options.host == null) {
        options.host = this.options.host;
      }
      if (options.protocol == null) {
        options.protocol = this.options.protocol;
      }
      if (options.port == null) {
        options.port = this.options.port;
      }
      if (options.method == null) {
        options.method = 'GET';
      }
      if (options.headers == null) {
        options.headers = {};
      }
      if ((_base = options.headers).host == null) {
        _base.host = this.options.hostname;
      }
      if (this.options.username != null) {
        if ((_base1 = options.header).Authorization == null) {
          _base1.Authorization = 'Basic ' + new Buffer("" + this.options.username + ":" + this.options.password).toString('base64');
        }
      }
      return options;
    };

    ApiBaseHTTP.prototype._parseResponse = function(buffer, fn) {
      var e, response;
      if (fn == null) {
        fn = null;
      }
      try {
        response = JSON.parse(buffer);
        if (fn) {
          return fn(response);
        }
      } catch (_error) {
        e = _error;
        return console.log(e, buffer);
      }
    };

    ApiBaseHTTP.prototype._request = function(options, fn) {
      var httpClient, post_data, request, _base, _base1,
        _this = this;
      if (fn == null) {
        fn = null;
      }
      debug('_request', options.method, options.path);
      this._request_options(options);
      if (options.protocol === 'http:') {
        if (this.httpClient == null) {
          this.httpClient = require('http');
        }
        httpClient = this.httpClient;
      } else if (options.protocol === 'https:') {
        if (this.httpClient_ssl == null) {
          this.httpClient_ssl = require('https');
        }
        httpClient = this.httpClient_ssl;
      }
      if (options.data) {
        post_data = require('querystring').stringify(options.data);
        if (options.headers == null) {
          options.headers = {};
        }
        if ((_base = options.headers)['Content-Length'] == null) {
          _base['Content-Length'] = post_data.length;
        }
        if ((_base1 = options.headers)['Content-Type'] == null) {
          _base1['Content-Type'] = 'application/x-www-form-urlencoded';
        }
      }
      if (!this.options['strict-ssl']) {
        options.strictSSL = false;
        options.rejectUnauthorized = false;
      }
      request = httpClient.request(options);
      if (post_data != null) {
        request.write(post_data);
      }
      request.end();
      return request.on('response', function(response) {
        var buffer;
        buffer = '';
        response.on('data', function(chunk) {
          return buffer += chunk;
        });
        return response.on('end', function() {
          return _this._parseResponse(buffer, fn);
        });
      });
    };

    return ApiBaseHTTP;

  })(ApiBase);

}).call(this);
